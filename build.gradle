import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'

    // Publishing plugins
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.+'

    id "net.minecraftforge.gradle" version "6.+"
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'

    // Adds the Kotlin Gradle plugin
    id 'org.jetbrains.kotlin.jvm' version '2.0.0'
    // OPTIONAL Kotlin Serialization plugin
    //id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.0'

}

version = mod_version
group = mod_group_id
base {
    archivesName = "${mod_id}-${minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

minecraft {
    mappings channel: mapping_channel, version: "$mapping_version-$minecraft_version"
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        copyIdeResources = true //Calls processResources when in dev
        configureEach {
            workingDirectory project.file("run/${it.name}")
            ideaModule "${rootProject.name}.${project.name}.main"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            taskName 'Client'
            args "--username", "Player", "--uuid", "314b59c7-413f-4357-a074-f059ebe5aaae"
        }

        server {
            taskName 'Server'
        }

        data {
            taskName 'Data'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
    maven {
        name = 'Forge' // Terrablender uses Forge maven
        url = "https://maven.minecraftforge.net"
    }
    maven {
        name = "CurseMaven"
        url "https://cursemaven.com"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation 'thedarkcolour:kotlinforforge:4.11.0'

    implementation fg.deobf('com.github.glitchfiend:GlitchCore-forge:' + minecraft_version + '-' + glitchcore_version)
    implementation fg.deobf('com.github.glitchfiend:TerraBlender-forge:' + minecraft_version + '-' + terrablender_version)
    runtimeOnly fg.deobf("curse.maven:TwilightForest-227639:5468648")
    runtimeOnly fg.deobf("curse.maven:WorldStripper-250603:4578579")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version          : forge_version,
            forge_version_range    : forge_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,

            terrablender_version_range        : terrablender_version_range,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : "1", // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


jar.finalizedBy('reobfJar')

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

var changelogText = file('changelog.md').exists() ? file('changelog.md').text : ""
curseforge {
    project {
        apiKey = System.getenv('CURSEFORGE_API_PUBLISH')
        id = curseforge_id
        changelog = changelogText
        changelogType = "markdown"
        releaseType = release_type
        addGameVersion minecraft_version
        addGameVersion "NeoForge"
        addGameVersion "Forge"
        relations {
            requiredDependency "terrablender"
        }
        mainArtifact(jar) {
            displayName = "$mod_name v$project.version"
        }
    }
}

modrinth {
    token = System.getenv('MODRINTH_API_PUBLISH')
    projectId = modrinth_id
    versionNumber = project.version
    versionName = "$mod_name v$project.version"
    versionType = release_type
    uploadFile = jar
    gameVersions = [minecraft_version] // Add the Minecraft versions you're targeting
    changelog = changelogText
    dependencies {
        required.project "terrablender"
    }
}
